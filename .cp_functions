#!/bin/bash
# Place this file in your home directory, your template in
# ~/.cp_template.cpp, your library in ~/.cp_library.cpp and
# add ". .cp_functions" (without quotes) at the end of your .bashrc

# Initialize the solution for the given problem from the template
function cpinit()
{
  if [[ -z "$1" ]]; then
    echo Usage: cpinit '<problem name>'
  else
    if [[ -f "$1.cpp" ]]; then
      echo File $1.cpp already exists
    else
      cp ~/.cp_template.cpp $1.cpp

      code $1.cpp
    fi
  fi
}

# Compile&run the given problem, and color the output to
# distinguish it from copy pasted input
#
# Using precompiled headers:
# - find bits/stdc++.h by compiling something with -H
# - compile it: g++ $CXXFLAGS <file> -o stdc++.h.gch
#   CXXFLAGS MUST be the same options that you set below, or it will be ignored later
# - set BITSSTDCPP_GCH to the output filename WITHOUT GCH AT THE END and enjoy faster compilation
# If you don't want precompiled headers, set BITSSTDCPP_GCH to ""

function cprun()
{
  CXXFLAGS="-O3 -std=c++17 -Wshadow -Wall -Wno-sign-compare -Wconversion -g -fsanitize=address -fsanitize=undefined -fno-sanitize-recover"
  BITSSTDCPP_GCH="$HOME/Desktop/cp/stdc++.h"

  if [[ $BITSSTDCPP_GCH ]]; then
    CXXFLAGS="$CXXFLAGS -include $BITSSTDCPP_GCH"
  fi

  filename=$1
  # remove final .cpp if present
  if [[ $filename == *.cpp ]]; then
    filename=${filename::-4}
  fi

  if [[ -f "$filename.cpp" ]]; then
    g++ $CXXFLAGS $filename.cpp -o $filename && ./$filename 2>&1 | grep --color .;
    # g++ $CXXFLAGS $filename.cpp -o $filename && ./$filename
  else
    echo Usage: cprun '<problem name>'
  fi
}

# Initialize a folder for a given contest. If no contest name if provided,
# use the current directory.
function cpcontest()
{
  if [[ $1 ]]; then
    if [[ -f "$1" ]] || [[ -d "$1" ]]; then
      echo $1 already exists
      return
    fi
    mkdir $1
    cd $1
  fi
  code .
  code ~/.cp_library.cpp
}
